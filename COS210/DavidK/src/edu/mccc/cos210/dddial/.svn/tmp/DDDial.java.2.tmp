package edu.mccc.cos210.dddial;
import java.util.*;
import java.awt.*;
import java.awt.geom.*;
import javax.swing.*;
import com.cbthinkx.util.Debug;
public abstract class DDDial extends JProgressBar {
	private BoundedRangeModel model;
	private ArrayList<SuperTicks> superTicks = new ArrayList<SuperTicks>();
	private int angleStart = 0;
	private int angleExtent = 360;
	private boolean round = true;
	private boolean ticks = true;
	private int tickInterval = 10;
	public void setAngleStart(int n) {
		Debug.println("DDDial.setAngleStart()");
        this.angleStart = ensureSaneAngle(n);
	}
	public void setAngleExtent(int n) {
		Debug.println("DDDial.setAngleExtent()");

        //Ensure that the endpoint is 'sane'
        this.angleExtent = ensureSaneAngleExtent(
                angleStart + n
        );
	}
	public void setRound(boolean b) {
		Debug.println("DDDial.setRound()");
		this.round = b;
	}
    /**
     * Ensures that angle extents are within legal boundaries
     * Returns the 'sane' version of the angle
     */
    private int ensureSaneAngle(int n) {
        if (round == true) {
            return n;
        } else {
            if (n > 180) {
                return 180;
            } 
            if (n < 0) {
                return 0;
            } 
        }
    }

	public void setTicks(boolean b, int i) {
		Debug.println("DDDial.setSuperTicks()");
		this.ticks = b;
		if (i < 0 ) {
			this.tickInterval = 1;
		} else {
			this.tickInterval = i;
		}
		if (i > this.angleExtent) {
			this.tickInterval = this.angleExtent;
		}
	}
	public void setSuperTicks(ArrayList <SuperTicks> superTicks) {
		Debug.println("DDDial.setSuperTicks()");
        this.superTicks = superTicks;
    }
	public void paintComponent(Graphics g) {
		Debug.println("DDDial.paintComponent()");
		super.paintComponent(g);
		double clockRadius = 63.5;
		Graphics2D g2d = (Graphics2D) g.create();
		g2d.setStroke(new BasicStroke(1));
		AffineTransform at = new AffineTransform();
		Shape s = new Ellipse2D.Double(
			0,
			0,
			clockRadius * 2,
			clockRadius * 2
		);
		s = at.createTransformedShape(s);
        g2d.setPaint(Color.BLACK);
		g2d.draw(s);
        //Draws ticks around the face
		drawClockFace(g2d, clockRadius);
		drawSuperTicks(g2d, clockRadius);
        double centerRadius = clockRadius / 10;
        at = new AffineTransform();
        //Translate our center circle to the center!
        at.translate(
            clockRadius - centerRadius / 2,
            clockRadius - centerRadius / 2
        );
        //Middle small ring
		s = new Ellipse2D.Double(
			0,
			0,
			centerRadius,
			centerRadius
		);
        s = at.createTransformedShape(s);
        g2d.setPaint(Color.BLACK);
		g2d.fill(s);
		g2d.draw(s);
		g2d.dispose();
	}
    private void drawSuperTicks(Graphics2D g2d, double radius) {
        double tickLength = radius / 2.5;
        double tickWidth  = radius / 30;
        //Create a tickmark in the top left of the screen, leaving blank space as a 'pivot arm'
        Shape tick = new Rectangle2D.Double(
            radius - tickLength,  //Pivot arm
            0,
            tickLength,
            tickWidth
        );
        AffineTransform at = new AffineTransform();
        //Translate our tickmark circle from the top left to the center
        at.translate(
            radius,
            radius - (tickWidth / 2)
        );
        at.scale(
            1, -1
        );
        int prevAngle = 0;
        //Rotate the 'pivot arm,' draw each tick:
        //Rather than getting a new affineTransform, we're rotating back to
        //the initial angle after every supertick
        for (SuperTicks superTick : superTicks) {
            g2d.setPaint(superTick.getColor());
            at.rotate(Math.toRadians(-prevAngle));
            prevAngle = superTick.getValue();
            at.rotate(Math.toRadians(superTick.getValue()));
            Shape s = at.createTransformedShape(tick);
            g2d.draw(s);
            g2d.fill(s);
        }
    }
    private void drawClockFace(Graphics2D g2d, double radius) {
        double tickLength = radius / 5;
        double tickWidth  = radius / 60;
        Shape tick = new Rectangle2D.Double(
            radius - tickLength,  //Pivot arm
            0,
            tickLength,
            tickWidth
        );
        AffineTransform at = new AffineTransform();
        at.translate(
            radius,
            radius - (tickWidth / 2)
        );
        at.scale(
            1, -1
        );
        at.rotate(Math.toRadians(angleStart));
        for (int angle = angleStart; angle <= angleStart + angleExtent; angle += tickInterval) {
            Shape s = at.createTransformedShape(tick);
            g2d.setPaint(Color.BLACK);
            g2d.draw(s);
            g2d.fill(s);
            at.rotate(Math.toRadians(tickInterval));
        }
    }
	public void stateChanged(MVCModelEvent e) {
		Debug.println("DDDial.stateChanged()");
		repaint();
	}
	public Dimension getPreferredSize() {
		Debug.println("DDDial.getPreferredSize()");
        if (round == true) {
            return new Dimension(128, 128);
        } else {
            return new Dimension(128, 64);
        }
	}
    class SuperTicks {
        private int value;
        private Color color;
        public SuperTicks(int value, Color color) {
            this.value = value;
            this.color = color;
        }
        public int getValue() {
            return this.value;
        }
        public Color getColor() {
            return this.color;
        }
    }
}